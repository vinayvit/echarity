from django.db.models import Q
from django.db import models
from django.http import Http404
from django.shortcuts import render, get_object_or_404
from django.template import Context
from products.models import ProductManager, Product
from django.views.generic.detail import DetailView
from django.views.generic.list import ListView
from django.utils import timezone
from .models import Product, Variation
from .models import Slider
from .models import Product, Service
from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required
from .forms import PostForm,ServiceForm
from .models import Product1
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse

from .forms import DocumentForm, ServiceForm, Service1Form
from dashboard.models import Document


# Create your views here
from django.conf import settings
# Avoid shadowing the login() and logout() views below.
from django.contrib.auth import (
    REDIRECT_FIELD_NAME, get_user_model, login as auth_login,
    logout as auth_logout, update_session_auth_hash,
)
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import (
    AuthenticationForm, PasswordChangeForm, PasswordResetForm, SetPasswordForm,
)
from django.contrib.auth.tokens import default_token_generator
from django.contrib.sites.shortcuts import get_current_site
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect, QueryDict
from django.shortcuts import resolve_url
from django.template.response import TemplateResponse
from django.utils.deprecation import RemovedInDjango20Warning
from django.utils.encoding import force_text
from django.utils.http import is_safe_url, urlsafe_base64_decode
from django.utils.six.moves.urllib.parse import urlparse, urlunparse
from django.utils.translation import ugettext as _
from django.views.decorators.cache import never_cache
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.debug import sensitive_post_parameters





#################################################################################
#Product list view

#def home(request):
	#sliders = Slider.objects.all()
	#products = Product.objects.a
	#template = 'home.html'
	#context = {
		#"products": products,
		#"sliders": sliders,
		#}
	#return render(request, template, context)

@sensitive_post_parameters()
@csrf_protect
@never_cache
def login(request, template_name='registration/login.html',
          redirect_field_name=REDIRECT_FIELD_NAME,
          authentication_form=AuthenticationForm,
          current_app=None, extra_context=None):
    """
    Displays the login form and handles the login action.
    """
    redirect_to = request.POST.get(redirect_field_name,
                                   request.GET.get(redirect_field_name, ''))

    if request.method == "POST":
        form = authentication_form(request, data=request.POST)
        if form.is_valid():

            # Ensure the user-originating redirection url is safe.
            if not is_safe_url(url=redirect_to, host=request.get_host()):
                redirect_to = resolve_url(settings.LOGIN_REDIRECT_URL)

            # Okay, security check complete. Log the user in.
            auth_login(request, form.get_user())

            return HttpResponseRedirect('/dashboard/')
    else:
        form = authentication_form(request)

    current_site = get_current_site(request)

    context = {
        'form': form,
        redirect_field_name: redirect_to,
        'site': current_site,
        'site_name': current_site.name,
    }
    if extra_context is not None:
        context.update(extra_context)

    if current_app is not None:
        request.current_app = current_app

    return TemplateResponse(request, template_name, context)
##################################################################################for home page

def home(request):
    model = Product
    post = Product.objects.filter(date_created__lte=timezone.now()).order_by('-docfile')[:8]
    return render(request, 'home.html', {'post': post})

##################################################################################for product list in product list
class ProductListView(ListView):
    model = Product
    queryset = Product.objects.all()


    def get_context_data(self, *args, **kwargs):
        context = super(ProductListView, self).get_context_data(*args, **kwargs)
        # print context
        context["now"] = timezone.now()
        context["query"] = self.request.GET.get("q")
        return context


#Basic search function
#using q import from django.db.models import Q
#
    def get_queryset(self, *args, **kwargs):
        qs = super(ProductListView, self).get_queryset(*args, **kwargs)
        query = self.request.GET.get("q")
        if query:
            qs = self.model.objects.filter(
                Q(title__icontains=query) |
                Q(description__icontains=query)
                )
            try:
                qs2 = self.model.objects.filter(
                Q(price=query)
                )
                qs = (qs | qs2).distinct()
            except:
                pass
        return qs

##################################################################################
#Variation List view
class VariationListView(ListView):
    model = Variation
    queryset = Variation.objects.all()


    # def get_context_data(self, *args, **kwargs):
    #     context = super(VariationListView, self).get_context_data(*args, **kwargs)
    #     # print context
    #     context["now"] = timezone.now()
    #     context["query"] = self.request.GET.get("q")
    #     return context

    def get_queryset(self, *args, **kwargs):
        # qs = super(VariationListView, self).get_queryset(*args, **kwargs)
        # query = self.request.GET.get("q")
        product_pk= self.kwargs.get("pk")
        if product_pk:
            product = get_object_or_404(Product, pk=product_pk)
            queryset = Variation.objects.filter(product=product)
        return queryset
    def post (self, request, *args, **kwargs):
        raise Http404


################################################################################## for show detail of product mail and dashboard
#Product Detail view for showing detail of products............
class ProductDetailView(DetailView):

    def product_detail_view_func(request, id):
        product_instance =  get_object_or_404(Product, id=id)
        try:
            product_instance = Product.object.get(id=id)
        except Product.DoesNotExist:
            raise Http404
        except:
            raise Http404
        template = "products/product_detail.html"
        context = {
        "object": product_instance
        }
        return render(request, template, context)

######################################################################################## for edit your product item fr history edit and product edit
@login_required
def post_edit(request, pk):
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    post = get_object_or_404(Product, pk=pk)
    if request.method == "POST":
        form = PostForm(request.POST, instance=post)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            post.save()
            return redirect('products.views.post_detail', pk=post.pk)
    else:
        form = PostForm(instance=post)
    return render(request, 'products/post_edit.html', {'form': form, 'document': document})


########################################################################################## show the list of login user donate items history
@login_required
def post_history(request):
    model = Product, User
    posts = Product.objects.filter(user_id = request.user.id)
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    return render(request, 'products/post_list.html', {'posts': posts, 'document': document})


################################################################################## detail of perticular donate items have experidate ....

@login_required
def post_detail_history(request, pk):
    model = Product
    user_id=request.user.id
    post = get_object_or_404(Product, user_id=request.user.id, pk=pk)
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    return render(request, 'products/product_detail_history.html', {'post': post, 'document': document})

########################################################################################## show detail of recent donateitem
def list_detail(request):
    post = Product.objects.filter(date_created__lte=timezone.now()).order_by('-docfile')
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    return render(request, "products/product_list.html", {'post': post, 'document': document})


################################################################################## show donate item form
@login_required
def list(request):
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)
        if form.is_valid():
            newdoc = Product(user = request.user, title = request.POST['title'], docfile = request.FILES['docfile'], active = request.POST['active'], description = request.POST['description'], quantity = request.POST['quantity'], zip_Code = request.POST['zip_Code'], address = request.POST['address'], expire_date = request.POST['expire_date'])
            newdoc.save()
            return redirect('products.views.post_detail_list', pk=newdoc.pk)
    else:
        form = DocumentForm() # A empty, unbound form

   # Load documents for the list page

    return render_to_response(
        'products/list.html',
        {'document': document, 'form': form},
        context_instance=RequestContext(request)
    )

##################################################################################
@login_required
def post_detail_list(request, pk):
    model = Product
    user_id=request.user.id
    #post = Product.objects.filter(user_id = request.user.id, pk=pk)
    post = get_object_or_404(Product, user_id=request.user.id, pk=pk)
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    return render(request, 'products/product_detail1.html', {'post': post, 'document': document})


################################################################################## edit form for history item
@login_required
def post_edit_list(request, pk):
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    post = get_object_or_404(Product, user_id=request.user.id, pk=pk)
    if request.method == "POST":
        form = PostForm(request.POST, instance=post )
        if form.is_valid():
            post.user = request.user
            post.save()
            return redirect('products.views.post_detail_list', pk=post.pk)
    else:
        form = PostForm(instance=post)
    return render(request, 'products/post_edit.html', {'form': form, 'document': document})

##################################################################################

@login_required
def post_edit_service(request, pk):
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    post = get_object_or_404(Service, user_id=request.user.id, pk=pk)
    if request.method == "POST":
        form = Service1Form(request.POST, instance=post )
        if form.is_valid():
            post.user = request.user
            post.save()
            return redirect('products.views.post_detail_service', pk=post.pk)
    else:
        form = Service1Form(instance=post)
    return render(request, 'products/post_edit_service.html', {'document': document, 'form': form})
    

@login_required
def post_detail_service(request, pk):
    model = Service
    user_id=request.user.id
    #post = Product.objects.filter(user_id = request.user.id, pk=pk)
    post = get_object_or_404(Service, user_id=request.user.id, pk=pk)
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    return render(request, 'products/service_detail1.html', {'document': document, 'post': post})


@login_required
def service(request):
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    if request.method == 'POST':
        form = ServiceForm(request.POST, request.FILES)
        if form.is_valid():
            newdoc = Service(user = request.user, title = request.POST['title'], docfile = request.FILES['docfile'], active = request.POST['active'], description = request.POST['description'], duraction = request.POST['duraction'], zip_Code = request.POST['zip_Code'], address = request.POST['address'], expire_date = request.POST['expire_date'])
            newdoc.save()
            return redirect('products.views.post_detail_service', pk=newdoc.pk)
    else:
        form = ServiceForm() # A empty, unbound form

   # Load documents for the list page

    return render_to_response(
        'products/service.html',
        {'document': document, 'form': form},
        context_instance=RequestContext(request)
    )

@login_required
def service_detail_history(request, pk):
    model = Service
    user_id=request.user.id
    #post = get_object_or_404(Product, user_id=request.user.id, pk=pk)
    post = get_object_or_404(Service, user_id=request.user.id, pk=pk)
    document = Document.objects.filter(user_id = request.user.id).order_by('-docfile')[:1]
    return render(request, 'products/service_detail_history.html', {'post': post, 'document': document})
    
def service_detail(request, pk):
    model = Service
    #user_id=request.user.id
    #post = Product.objects.filter(user_id = request.user.id, pk=pk)
    post = get_object_or_404(Service, pk=pk)
    #document = Document.objects.filter(user_id = request.user.id)[:1]
    return render(request, 'products/service_detail.html', {'post': post})
    
@login_required
def service_history(request):
    model = Service, User
    posts = Service.objects.filter(user_id = request.user.id)
    document = Document.objects.filter(user_id = post.user.id).order_by('-docfile')[:1]
    return render(request, 'products/service_list.html', {'posts': posts, 'document': document})
    
def servicelist(request):
    model = Service
    post = Service.objects.all()
    return render(request, 'products/service_home.html', {'post': post})

def servicelist(request):
    model = Service
    post = Service.objects.all()
    return render(request, 'products/service_home.html', {'post': post})

def service_detail_home(request, pk):
    model = Service, Document
    #user_id=request.user.id
    post = get_object_or_404(Service, pk=pk)
    document = Document.objects.filter(user_id = post.user.id).order_by('-docfile')[:1]
    #document = Document.objects.filter(user_id = request.user.id)[:1]
    return render(request, 'products/service_detail_home.html', {'post': post, 'document': document})



